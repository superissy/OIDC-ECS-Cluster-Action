name: AWS OIDC Connect Demo
on:
  push
env:
  AWS_REGION : "us-east-1"
  AWS_ROLE_TO_ASSUME: "arn:aws:iam::438270576332:role/oidc_github_action_role"
  REPOSITORY_NAME: "${{ github.actor }}"
  IMAGE_NAME: "oidc-juice-shop-demo"
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
jobs:
  DemoOIDC:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          role-session-name: ecs-deploy-action-session
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if AWS ECR Repository exists
      # The ecr_repo this is used to reference the name of a specific section in the Job step
        id: ecr_repo
        run: |
          if aws ecr describe-repositories --repository-names "${{ env.REPOSITORY_NAME }}_${{ env.IMAGE_NAME }}" --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi
      # The below will create the AWS ECR repository if it does not exist
      - name: Create AWS ECR Repository
        if: steps.ecr_repo.outputs.exists == 'false'
        run: |
              aws ecr create-repository --repository-name "${{ env.REPOSITORY_NAME }}_${{ env.IMAGE_NAME }}" --region ${{ env.AWS_REGION }}

      # The below will login to AWS ECR and build image
      - name: Get ECR Repository URI
        id: get-uri
        run: |
          OUTPUT=$(aws ecr describe-repositories --repository-names "${{ env.REPOSITORY_NAME }}_${{ env.IMAGE_NAME }}" --region ${{ env.AWS_REGION }} --query 'repositories[0].repositoryUri' --output text)
          echo "::set-output name=ecr_registory::$OUTPUT"

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        run: |
          IMAGE_URI=${{ steps.get-uri.outputs.ecr_registory }}:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image=$$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Create ECS cluster via terraform
        run: |
          terraform plan -out=tfplan -var="image_name=$$IMAGE_URI"
          terraform apply -auto-approve tfplan